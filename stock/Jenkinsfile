pipeline {
    agent any
    
    environment {
        // Variables d'environnement
        DOCKER_IMAGE = 'ihab10/stock-frontend'
        DOCKER_TAG = "${BUILD_NUMBER}"
        GITHUB_REPO = 'https://github.com/IhabHilal/stock_front.git'
    }
    
    stages {
        stage('1. Checkout Code') {
            steps {
                echo 'üì• R√©cup√©ration du code source depuis GitHub...'
                git branch: 'main', url: "${GITHUB_REPO}"
                echo '‚úÖ Code r√©cup√©r√© avec succ√®s'
            }
        }
        
        stage('2. Build Docker Image') {
            steps {
                echo 'üî® Construction de l\'image Docker...'
                script {
                    sh 'docker --version' // V√©rification de la version de Docker
                    sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                    echo "‚úÖ Image Docker construite: ${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
            }
        }
        
        stage('3. Test Image') {
            steps {
                echo 'üß™ Test de l\'image Docker...'
                script {
                    // Test simple : v√©rifier que l'image d√©marre correctement
                    sh """
                        docker run --rm -d --name test-container -p 5173:5173 ${DOCKER_IMAGE}:${DOCKER_TAG}
                        sleep 10
                        # V√©rifier que le container est en cours d'ex√©cution
                        docker ps | grep test-container
                        # Arr√™ter le container de test
                        docker stop test-container
                    """
                    echo '‚úÖ Tests pass√©s avec succ√®s'
                }
            }
        }
        
        stage('4. Push to Docker Hub') {
            steps {
                echo 'üì§ Publication sur Docker Hub...'
                script {
                    // Connexion √† Docker Hub et push de l'image
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', 
                                                    usernameVariable: 'DOCKER_USERNAME', 
                                                    passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh """
                            echo \$DOCKER_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin
                            docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                            docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                            docker push ${DOCKER_IMAGE}:latest
                        """
                    }
                    echo "‚úÖ Image publi√©e sur Docker Hub: ${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
            }
        }
        
        stage('5. Deploy') {
            steps {
                echo 'üöÄ D√©ploiement de l\'application...'
                script {
                    // D√©ploiement simple (arr√™ter l'ancien container et d√©marrer le nouveau)
                    sh """
                        # Arr√™ter et supprimer l'ancien container s'il existe
                        docker stop stock-frontend || true
                        docker rm stock-frontend || true
                        
                        # D√©marrer le nouveau container
                        docker run -d --name stock-frontend -p 5173:5173 ${DOCKER_IMAGE}:${DOCKER_TAG}
                        
                        # V√©rifier que le container est d√©marr√©
                        sleep 5
                        docker ps | grep stock-frontend
                    """
                    echo '‚úÖ Application d√©ploy√©e avec succ√®s sur le port 5173'
                }
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Nettoyage des ressources...'
            // Nettoyage des images Docker locales anciennes
            sh """
                # Supprimer les images non utilis√©es pour lib√©rer l'espace
                docker image prune -f || true
            """
        }
        success {
            echo 'üéâ Pipeline ex√©cut√© avec succ√®s!'
            echo "üåê Application accessible sur: http://localhost:5173"
        }
        failure {
            echo '‚ùå Pipeline √©chou√©. V√©rifiez les logs ci-dessus.'
        }
    }
}
